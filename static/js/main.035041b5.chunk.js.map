{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","_this$props$robot","this","props","robot","id","name","email","react_default","a","createElement","className","src","concat","alt","Component","CardList","Fragment","robots","map","components_Card","key","SearchBox","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAiBeA,mLAdF,IAAAC,EACuBC,KAAKC,MAAMC,MAA/BC,EADHJ,EACGI,GAAIC,EADPL,EACOK,KAAMC,EADbN,EACaM,MAClB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BR,EAA1B,YAAwCS,IAAI,UACpDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAOJ,YARrBQ,aCgBJC,mLAbP,OACIR,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KACKf,KAAKC,MAAMe,OAAOC,IAAI,SAAAf,GAAK,OACxBI,EAAAC,EAAAC,cAACU,EAAD,CACIC,IAAKjB,EAAMC,GACXD,MAAOA,cAPRW,aCYRO,mLAXP,OACId,EAAAC,EAAAC,cAAA,SACIC,UAAU,6CACVY,KAAK,SACLC,YAAY,mBACZC,SAAUvB,KAAKC,MAAMsB,kBAPbV,aCQTW,EARA,SAACvB,GACZ,OACIK,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SACjE3B,EAAM4B,WCsCAC,2BAnCf,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhC,KAAA8B,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhC,KAAAgC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApC,QAaJqC,eAAiB,SAACC,GACdP,EAAKQ,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1CX,EAAKY,MAAQ,CACT3B,OAAQ,GACRwB,YAAa,IAJPT,mFAQM,IAAAa,EAAA5C,KAChB6C,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAUL,EAAKL,SAAS,CAAEvB,OAAQiC,uCAOnC,IAAAC,EAC2BlD,KAAK2C,MAA7B3B,EADHkC,EACGlC,OAAQwB,EADXU,EACWV,YACVW,EAAiBnC,EAAOoC,OAAO,SAAAlD,GACjC,OAAOA,EAAME,KAAKiD,cAAcC,SAASd,EAAYa,iBAEzD,OAAQrC,EAAOuC,OAEXjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACgD,EAAD,CAAWjC,SAAUvB,KAAKqC,iBAC1B/B,EAAAC,EAAAC,cAACiD,EAAD,KACInD,EAAAC,EAAAC,cAACkD,EAAD,CAAU1C,OAAQmC,MALtB7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAKH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,sBAzBdI,cCKE8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.035041b5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Card extends Component {\n    render() {\n        const { id, name, email } = this.props.robot;\n        return(\n            <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\n                <div className=\"tc\">\n                    <h2>{name}</h2>\n                    <p className=\"ttl\">{email}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport Card from './Card';\n\nclass CardList extends Component {\n    render() {\n        return(\n            <React.Fragment>\n                {this.props.robots.map(robot => (\n                    <Card\n                        key={robot.id}\n                        robot={robot}\n                    />\n                ))}\n            </React.Fragment>\n        )\n    }\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass SearchBox extends Component {\n    render() {\n        return(\n            <input\n                className=\"db pa3 ba b--green bg-lightest-blue center\"\n                type=\"search\"\n                placeholder=\"type a name here\"\n                onChange={this.props.onChange}\n            />\n        )\n    }\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '70vh' }}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from './components/CardList';\r\nimport SearchBox from './components/SearchBox';\r\nimport Scroll from './components/Scroll';\r\nimport 'tachyons';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users => {this.setState({ robots: users })});\r\n    }\r\n    \r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n    \r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return !robots.length ?\r\n            <div className=\"tc\"><h1 className=\"f1\">Loading...</h1></div> : (\r\n            <div className='tc'>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <SearchBox onChange={this.onSearchChange}/>\r\n            <Scroll>\r\n                <CardList robots={filteredRobots} />\r\n            </Scroll>\r\n            </div> );\r\n        }\r\n    }\r\n    \r\n    export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}